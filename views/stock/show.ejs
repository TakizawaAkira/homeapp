<!DOCTYPE html>
<html>
  <head>
    <title>投資指標データ-<%-title-%>-<%-sub_title-%></title>
    <meta charset="utf-8">
    <%- include ../template/bootstrap.ejs %>
    <%- include ../template/d3js.ejs %>
  </head>
  <body style="/*margin:0px;*/">
    <div class="container">
      <%- include('navbar.ejs', {sub_title: sub_title, description: description}) %>
      <hr>
      <%- include header.ejs %>
      <div class="row">
        <div class="col">
          <nav class="navbar navbar-light bg-faded">
            <h1 class="navbar-brand mb-0">終値グラフ</h1>
          </nav>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <div class="view_stock_prices"></div>
          <style type="text/css">
          /* 13. Basic Styling with CSS */
          /* Style the lines by removing the fill and applying a stroke */
          .line {
              fill: none;
              stroke: #ffab00;
              stroke-width: 3;
          }
          /* Style the dots by assigning a fill and stroke */
          .dot {
              fill: #ffab00;
              stroke: #fff;
          }
          </style>
          <script>
          var stock_price_datas = <%-JSON.stringify(stock_price_datas)-%>;
          var max_value = 0;
          var min_value = 999999999999;
          var final_prices = stock_price_datas.map(arr=>{
            if(max_value<arr['pre_close_price']) max_value=arr['pre_close_price'];
            if(min_value>arr['pre_close_price']) min_value=arr['pre_close_price'];
            return {'y': arr['pre_close_price']};
          });

          console.log(final_prices);


          // 2. Use the margin convention practice
          var margin = {top: 50, right: 10, bottom: 50, left: 50}
            , width = $(".view_stock_prices").width() - margin.left - margin.right // Use the window's width
            , height = 480 - margin.top - margin.bottom; // Use the window's height

          // The number of datapoints
          var n = final_prices.length;

          // 5. X scale will use the index of our data
          var xScale = d3.scaleLinear()
              .domain([0, n-1]) // input
              .range([0, width]); // output

          // 6. Y scale will use the randomly generate number
          var yScale = d3.scaleLinear()
              .domain([min_value, max_value]) // input
              .range([height, 0]); // output

          // 7. d3's line generator
          var line = d3.line()
              .x(function(d, i) { return xScale(i); }) // set the x values for the line generator
              .y(function(d) { return yScale(d.y); }) // set the y values for the line generator
              .curve(d3.curveMonotoneX) // apply smoothing to the line

          // 8. An array of objects of length N. Each object has key -> value pair, the key being "y" and the value is a random number
          var dataset = d3.range(n).map(function(d) { return {"y": d3.randomUniform(1)() } })

          console.log(dataset);
          // 1. Add the SVG to the page and employ #2
          var svg = d3.select(".view_stock_prices").append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          // 3. Call the x axis in a group tag
          svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom

          // 4. Call the y axis in a group tag
          svg.append("g")
              .attr("class", "y axis")
              .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft

          // 9. Append the path, bind the data, and call the line generator
          svg.append("path")
              .datum(final_prices) // 10. Binds data to the line
              .attr("class", "line") // Assign a class for styling
              .attr("d", line); // 11. Calls the line generator

          // 12. Appends a circle for each datapoint
          svg.selectAll(".dot")
              .data(final_prices)
            .enter().append("circle") // Uses the enter().append() method
              .attr("class", "dot") // Assign a class for styling
              .attr("cx", function(d, i) { return xScale(i) })
              .attr("cy", function(d) { return yScale(d.y) })
              .attr("r", 5);
          </script>
        </div>
      </div>
      <div class="row">
        <div class="col">
          <nav class="navbar navbar-light bg-faded">
            <h1 class="navbar-brand mb-0">詳細データ一覧</h1>
          </nav>
        </div>
      </div>
      <div class="row">
          <table class="table table-striped">
            <thead>
              <tr>
                <th>日時</th>
                <th>株価</th>
                <th>前日比</th>
                <th>前日比(％)</th>
                <th>前日終値</th>
                <th>始値</th>
                <th>高値</th>
                <th>安値</th>
                <th>出来高</th>
                <th>売買代金(千円)</th>
                <th>時価総額(百万円)</th>
                <th>値幅下限</th>
                <th>値幅上限</th>
              </tr>
            </thead>
            <tbody>
              <%for(var dairy_key in stock_price_datas){ -%>
                <tr scope="row">
                  <td><%=dateformat(stock_price_datas[dairy_key]['datetime'], 'yyyy/mm/dd');-%></td>
                  <td><%=stock_price_datas[dairy_key]['stock_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['pre']-%></td>
                  <td><%=stock_price_datas[dairy_key]['pre_per']-%></td>
                  <td><%=stock_price_datas[dairy_key]['pre_close_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['open_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['high_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['low_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['yield']-%></td>
                  <td><%=stock_price_datas[dairy_key]['trading_price']-%></td>
                  <td><%=stock_price_datas[dairy_key]['market_capitalization']-%></td>
                  <td><%=stock_price_datas[dairy_key]['price_low_limit']-%></td>
                  <td><%=stock_price_datas[dairy_key]['price_upper_limit']-%></td>
                </tr>
              <%} -%>
            </tbody>
          </table>
      </div>
      <%- include footer.ejs %>
  </div>
  </body>
</html>
